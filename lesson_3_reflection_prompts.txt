When would you want to use a remote repository rather than keeping 
all your work local?

  When I don't have my computer and can't clone my repository to the 
  laptop I'm using, simply add code on the internet. Simple. 
  

Why might you want to always pull changes manually rather than having 
Git automatically stay up-to-date with your remote repository?

  I might not want to make changes from the changes I made in my remote 
  repository later. Or I have made change in A, and did the same in my 
  computer. There could be conflict. Maybe I would have wanted to test 
  different version from the one in remote repository. 


Q. Fixed errors
(myvenv) jiwonhwang (master) anna2016-master $ git push origin master
To https://github.com/JiwonHwang/anna2016.git
 ! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to 'https://github.com/JiwonHwang/anna2016.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.



Q.
jiwonhwang code $ ls 
django_girls_seoul  myvenv
jiwonhwang code $ source myvenv/bin/activate
(myvenv) jiwonhwang code $ cd django_girls_seoul/
(myvenv) jiwonhwang django_girls_seoul $ cd anna2016
bash: cd: anna2016: No such file or directory
(myvenv) jiwonhwang django_girls_seoul $ cd anna2016-master/
(myvenv) jiwonhwang (master) anna2016-master $ python manage.py runserver
Traceback (most recent call last):
  File "manage.py", line 10, in <module>
    execute_from_command_line(sys.argv)
  File "/home/jiwonhwang/Documents/code/myvenv/lib/python3.4/site-packages/
  django/core/management/__init__.py", line 338, in execute_from_command_line
    utility.execute()
  File "/home/jiwonhwang/Documents/code/myvenv/lib/python3.4/site-packages/
  django/core/management/__init__.py", line 312, in execute
    django.setup()
  File "/home/jiwonhwang/Documents/code/myvenv/lib/python3.4/site-packages/
  django/__init__.py", line 18, in setup
    apps.populate(settings.INSTALLED_APPS)
  File "/home/jiwonhwang/Documents/code/myvenv/lib/python3.4/site-packages/
  django/apps/registry.py", line 108, in populate
    app_config.import_models(all_models)
  File "/home/jiwonhwang/Documents/code/myvenv/lib/python3.4/site-packages/
  django/apps/config.py", line 198, in import_models
    self.models_module = import_module(models_module_name)
  File "/home/jiwonhwang/Documents/code/myvenv/lib/python3.4/importlib/
  __init__.py", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 2254, in _gcd_import
  File "<frozen importlib._bootstrap>", line 2237, in _find_and_load
  File "<frozen importlib._bootstrap>", line 2226, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 1200, in _load_unlocked
  File "<frozen importlib._bootstrap>", line 1129, in _exec
  File "<frozen importlib._bootstrap>", line 1471, in exec_module
  File "<frozen importlib._bootstrap>", line 321, in _call_with_frames_removed
  File "/home/jiwonhwang/Documents/code/django_girls_seoul/anna2016-master/blog/
  models.py", line 6, in <module>
    class Post(models.Model):
  File "/home/jiwonhwang/Documents/code/django_girls_seoul/anna2016-master/
  blog/models.py", line 9, in Post
    text = models.HTMLField()
AttributeError: 'module' object has no attribute 'HTMLField'


Describe the differences between forks, clones, and branches. When would 
you use one instead of another?

  fork: copy codes and it's history from the original repository. / When
   I want to make changes and not affect in the original repository. I can
    experiment and if it is successful, I can ask pull request. 
  clone: copy codes from github repository / When I want to edit it at my 
  computer. git clone <url of the repository>
  branches: by forking, I created a branch from master branch of the 
  original repository. Let's say there's a repository named A, and there's 
  a master branch by 'Tom.' I forked and created another branch by me. 
  The forked repostiroy's master is me. 


What is the benefit of having a copy of the last known state of the 
remote stored locally?

  Note: I will probably want to come back here to revise this part. 
  I don't think I understood the question fully. 
  I can figure out what changes I have made at my computer, and choose 
  to do apply it by 'git merge', 'git push.'

  right answer was... (copied from https://github.com/cbuckey-uda/
  reflections/blob/master/lesson_3_reflections.txt)
  
  If I am about to go without Internet access for a while, for example to work
    on a plane, I can update my local copy before I leave.  I can do this even
    if I'm not ready to merge those changes into my own branches yet.  Then if I
    want, I can perform the merge while offline, or I need to know what the
    remote version is at some point, I have an easy way to access it.


How would you collaborate without using Git or GitHub? What would be easier, 
and what would be harder?

  Email, slack, save and exchange each file then compare, someone will have to 
  copy and paste... such a manual process. 
  Using Gut or/GitHub will be much easier. 